<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>zhcexo&#39;s blog</title>
  
  <subtitle>yet another fe blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://zhcexo.com/"/>
  <updated>2018-05-25T06:29:39.034Z</updated>
  <id>http://zhcexo.com/</id>
  
  <author>
    <name>zhcexo</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Golang 中为切片 append 元素之后 cap 变化的问题</title>
    <link href="http://zhcexo.com/2018/05/25/append-and-cap-in-golang/"/>
    <id>http://zhcexo.com/2018/05/25/append-and-cap-in-golang/</id>
    <published>2018-05-25T06:04:04.000Z</published>
    <updated>2018-05-25T06:29:39.034Z</updated>
    
    <content type="html"><![CDATA[<p>在学习 Go 语言基础的时候，看到了 slice 切片这里，里面有个 append 方法，用于往 slice 里添加元素。代码如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> numbers []<span class="keyword">int</span></span><br><span class="line">    printSlice(numbers)</span><br><span class="line"></span><br><span class="line">    numbers = <span class="built_in">append</span>(numbers, <span class="number">0</span>)</span><br><span class="line">    printSlice(numbers)</span><br><span class="line"></span><br><span class="line">    numbers = <span class="built_in">append</span>(numbers, <span class="number">1</span>)</span><br><span class="line">    printSlice(numbers)</span><br><span class="line"></span><br><span class="line">    numbers = <span class="built_in">append</span>(numbers, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">    printSlice(numbers)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">printSlice</span><span class="params">(x []<span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">    fmt.Printf(<span class="string">"len=%d cap=%d slice=%v\n"</span>, <span class="built_in">len</span>(x), <span class="built_in">cap</span>(x), x)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码运行的结果是：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">len=0 cap=0 slice=[]</span><br><span class="line">len=1 cap=1 slice=[0]</span><br><span class="line">len=2 cap=2 slice=[0 1]</span><br><span class="line">len=5 cap=6 slice=[0 1 2 3 4]</span><br></pre></td></tr></table></figure><p>差一点就看看跳过了，不过最后一行的结果，<code>cap</code> 执行的结果显示，这个 <code>numbers</code> 切片的容量为 6。</p><p>如果是写其他的语言，比如 JavaScript，那么这个结果可能会跟 <code>length</code> 作类比从而产生“为什么容量不是 5”这种想法，毕竟我们只在 slice 里添加了 5 个元素。翻了一下官方的文档也没有解释，后来在 stackoverflow 上看到了别人的回答，大致总结如下：</p><blockquote><p>Go 会为你的 slice 提供比你需要的更多的容量，原因是在 slice 的底层，有个不可变动的（immutable）数组（array）在实际起作用。当你要为 slice 添加元素从而让切片的容量更大的时候，实际上是创建了一个新数组，把原来的切片元素和新添加的元素放到新的数组里，并把这个数组作为新 slice 的底层。如果你添加很多数据到 slice 里，就会反复去创建和复制这些数据，影响性能。所以运行时会分配比你期望的更多的容量到 slice，让复制数据这些操作变得不那么频繁。</p></blockquote><p>虽然原因找下来，感觉这个问题似乎不怎么重要，不过有人如果看到这里，跟我有同样的疑惑，也可以做个参照。</p><p><strong>参考资料：</strong></p><ul><li><a href="https://stackoverflow.com/questions/38573983/capacity-of-slices-in-go" target="_blank" rel="noopener">https://stackoverflow.com/questions/38573983/capacity-of-slices-in-go</a></li><li><a href="https://stackoverflow.com/questions/38543825/appending-one-element-to-nil-slice-increases-capacity-by-two" target="_blank" rel="noopener">https://stackoverflow.com/questions/38543825/appending-one-element-to-nil-slice-increases-capacity-by-two</a></li><li><a href="https://blog.csdn.net/a_flying_bird/article/details/54428546" target="_blank" rel="noopener">Go-append使用方法及注意事项</a></li><li><a href="https://blog.csdn.net/zxhoo/article/details/70159926" target="_blank" rel="noopener">Go语言小知识之append()函数</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在学习 Go 语言基础的时候，看到了 slice 切片这里，里面有个 append 方法，用于往 slice 里添加元素。代码如下：&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;s
      
    
    </summary>
    
    
      <category term="go" scheme="http://zhcexo.com/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>记一次搭梯子的过程</title>
    <link href="http://zhcexo.com/2018/05/24/ladder/"/>
    <id>http://zhcexo.com/2018/05/24/ladder/</id>
    <published>2018-05-24T09:21:32.000Z</published>
    <updated>2018-05-24T09:54:42.402Z</updated>
    
    <content type="html"><![CDATA[<p>之前一直用的 Japan 的线路，结果越来越不稳定，后来干脆变成不可用了，所以换了一家 VPS 换了一条线路，以此文章记录一下这次的过程，方便以后折腾。</p><p>服务器安装的是 <strong>ubuntu 18 LTS x64 版本</strong>，准备使用 55 和 kcp 当梯子。</p><h2 id="步骤：-以下步骤默认都是-root-下执行"><a href="#步骤：-以下步骤默认都是-root-下执行" class="headerlink" title="步骤：(以下步骤默认都是 root 下执行)"></a>步骤：(以下步骤默认都是 root 下执行)</h2><h3 id="1-安装-python-pip-和-55"><a href="#1-安装-python-pip-和-55" class="headerlink" title="1. 安装 python-pip 和 55"></a>1. 安装 python-pip 和 55</h3><p>使用两个命令即可：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apt-get install python-pip</span><br><span class="line">pip install git+https://github.com/shadowsocks/shadowsocks.git@master</span><br></pre></td></tr></table></figure><p>执行第二个命令如果报错，例如 <code>ImportError: No module named setuptools</code>，只需要再安装 setuptools 即可。</p><p>先查看自己服务器的 Python 版本：</p><blockquote><ol><li>在终端上输入 python，进入 python shell</li><li>输入 help() 查看 python 版本</li><li>查看完毕后，输入 exit() 退出 python shell</li></ol></blockquote><p>接下来安装 setuptools：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget https://bootstrap.pypa.io/ez_setup.py -O - | sudo python</span><br><span class="line"><span class="meta">#</span> 或者</span><br><span class="line">wget https://bootstrap.pypa.io/ez_setup.py -O - | sudo python3.4</span><br></pre></td></tr></table></figure><h3 id="2-配置和启用-55"><a href="#2-配置和启用-55" class="headerlink" title="2. 配置和启用 55"></a>2. 配置和启用 55</h3><p>安装完之后，在 <code>/etc/</code> 目录下创建配置文件，命名为 <code>shadowsocks.json</code>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"server"</span>:<span class="string">"0.0.0.0"</span>,             <span class="comment">// your server ip goes here</span></span><br><span class="line">    <span class="string">"server_port"</span>:<span class="number">8388</span>,</span><br><span class="line">    <span class="string">"local_address"</span>: <span class="string">"127.0.0.1"</span>,</span><br><span class="line">    <span class="string">"local_port"</span>:<span class="number">1080</span>,</span><br><span class="line">    <span class="string">"password"</span>:<span class="string">"**********"</span>,        <span class="comment">// your ss password goes here</span></span><br><span class="line">    <span class="string">"timeout"</span>:<span class="number">300</span>,</span><br><span class="line">    <span class="string">"method"</span>:<span class="string">"aes-256-gcm"</span>,</span><br><span class="line">    <span class="string">"fast_open"</span>: <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动和停止 55 的方法是：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssserver -c /etc/shadowsocks.json -d start      # 这是后台启动的方式</span><br><span class="line">ssserver -c /etc/shadowsocks.json -d stop       # 这是对应的停止的方式</span><br></pre></td></tr></table></figure><h3 id="3-安装-kcptun"><a href="#3-安装-kcptun" class="headerlink" title="3. 安装 kcptun"></a>3. 安装 kcptun</h3><p>直接访问项目地址吧，安装过程不说了，<a href="https://github.com/kuoruan/shell-scripts" target="_blank" rel="noopener">https://github.com/kuoruan/shell-scripts</a>。</p><p>安装过程中可能会提示 <code>iptables</code> 相关的错误，原因是 <code>iptables</code> 在 centos 和 ubuntu 上有差异。脚本似乎是针对 centos 写的，不过无所谓，脚本里面已经提示了自己去解决 <code>iptables</code> 问题，但直接按提示去解决会出错。</p><p>解决办法无外乎两步：首先添加相应规则到 <code>iptables</code>，然后重启 <code>iptables</code> 服务。</p><p>添加 <code>iptables</code> 配置<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iptables -I INPUT -p udp --dport 29900 -j ACCEPT        # 29900 换成你自己的</span><br></pre></td></tr></table></figure></p><p>保存 <code>iptables</code> 的配置（ubuntu 下）<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iptables-save</span><br></pre></td></tr></table></figure></p><p>重启 <code>iptables</code>，因为 ubuntu 用的是 <code>ufw</code> 作为 <code>iptables</code> 的前端，所以使用如下命令重启：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service ufw restart</span><br></pre></td></tr></table></figure></p><h3 id="4-注意"><a href="#4-注意" class="headerlink" title="4. 注意"></a>4. 注意</h3><p>在配置 kcptun 的时候，加速的 IP 填写外网的 IP，如果填本地 IP（127.0.0.1 或者 0.0.0.0）都会出来 <code>dial tcp 127.0.0.1:8388: connect: connection refused</code> 这种错误。</p><h3 id="5-参考资料"><a href="#5-参考资料" class="headerlink" title="5. 参考资料"></a>5. 参考资料</h3><p><a href="https://blog.kuoruan.com/110.html" target="_blank" rel="noopener">https://blog.kuoruan.com/110.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;之前一直用的 Japan 的线路，结果越来越不稳定，后来干脆变成不可用了，所以换了一家 VPS 换了一条线路，以此文章记录一下这次的过程，方便以后折腾。&lt;/p&gt;
&lt;p&gt;服务器安装的是 &lt;strong&gt;ubuntu 18 LTS x64 版本&lt;/strong&gt;，准备使用 55
      
    
    </summary>
    
    
      <category term="server" scheme="http://zhcexo.com/tags/server/"/>
    
  </entry>
  
  <entry>
    <title>在 VSCODE 中安装 Go 语言相关支持</title>
    <link href="http://zhcexo.com/2018/05/21/go-tools-in-vscode/"/>
    <id>http://zhcexo.com/2018/05/21/go-tools-in-vscode/</id>
    <published>2018-05-21T01:58:03.000Z</published>
    <updated>2018-05-21T02:11:44.133Z</updated>
    
    <content type="html"><![CDATA[<p>写好 Go 文件，用 VSCode 打开之后，右下角会提示缺少 Go 相关的支持，然后会有两个按钮 <code>Install</code> 和 <code>Show</code>。<code>Install</code> 是自动安装这些支持，<code>Show</code> 是显示缺了些什么。但实际情况是，点了 <code>Install</code> 之后，控制台一堆报错并且安装失败。</p><p>点击 <code>Install</code> 或者 <code>Show</code>，控制台里已经显示缺少如下工具：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">github.com/ramya-rao-a/go-outline</span><br><span class="line">github.com/acroca/go-symbols</span><br><span class="line">golang.org/x/tools/cmd/guru</span><br><span class="line">golang.org/x/tools/cmd/gorename</span><br><span class="line">github.com/rogpeppe/godef</span><br><span class="line">github.com/sqs/goreturns</span><br><span class="line">github.com/golang/lint/golint</span><br><span class="line">github.com/derekparker/delve/cmd/dlv</span><br></pre></td></tr></table></figure><p>然后用 <code>go install</code> 或者 <code>go get -v</code> 都安装不成功。</p><h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><ol><li>打开 Go 的安装目录</li><li>进入安装目录下的 <code>src</code> 目录，新建 <code>golang.org</code> 目录，在此目录下继续新建 <code>x</code> 目录</li><li>进入 <code>安装目录/golang.org/x</code> 目录，执行以下两个命令</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/golang/tools.git</span><br><span class="line">git clone https://github.com/golang/lint.git</span><br></pre></td></tr></table></figure><p>第一个安装除 <code>go-lint</code> 之外其他工具的支持，第二个安装 <code>go-lint</code> 支持。</p><p>以上步骤都处理完之后，就可以用 <code>go get ***</code> 和 <code>go install ***</code> 这种方式把缺的工具都装好。安装之后重启 VScode 即使用 Go 语言相关支持。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;写好 Go 文件，用 VSCode 打开之后，右下角会提示缺少 Go 相关的支持，然后会有两个按钮 &lt;code&gt;Install&lt;/code&gt; 和 &lt;code&gt;Show&lt;/code&gt;。&lt;code&gt;Install&lt;/code&gt; 是自动安装这些支持，&lt;code&gt;Show&lt;/cod
      
    
    </summary>
    
    
      <category term="go" scheme="http://zhcexo.com/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>同一页面运行wepback不同实例出现冲突的解决办法</title>
    <link href="http://zhcexo.com/2018/04/18/webpack-multiple-instance-on-the-same-page/"/>
    <id>http://zhcexo.com/2018/04/18/webpack-multiple-instance-on-the-same-page/</id>
    <published>2018-04-18T03:03:00.000Z</published>
    <updated>2018-04-18T03:23:44.436Z</updated>
    
    <content type="html"><![CDATA[<h3 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h3><p>对于同一个页面功能由不同的同事开发，都用到了 <code>webpack</code> 以及 <code>CommonsChunkPlugin</code>，最后把打包出来的代码，整合到一起的时候，冲突了。</p><h3 id="问题表现"><a href="#问题表现" class="headerlink" title="问题表现"></a>问题表现</h3><p>各自用 <code>webpack</code> 打包代码没有问题，但是加载到页面上时，代码报错且错误难以定位。</p><h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><p>在 <code>webpack</code> 的配置选项里使用 <code>output.jsonpFunction</code>。</p><p>看一下文档里说的：</p><blockquote><p>output.jsonpFunction<br><code>string</code><br>仅用在输出目标为 web，且使用 jsonp 的方式按需加载代码块时。<br>一个命名的 JSONP 函数用于异步加载代码块或者把多个初始化代码块合并到一起时使用（如 CommonsChunkPlugin, AggressiveSplittingPlugin）。<br>当同一个页面上有多个 webpack 实例（源于不同的编译），需要修改这个函数名。<br>如果使用了 <code>output.library</code> 选项，那么这个 <code>library</code> 的命名会自动附加上。</p></blockquote><p>事实上 webpack 并不在全局命名空间下运行，但是 <code>CommonsChunkPlugin</code> 这样的插件会使用异步 JSONP 的方法按需加载代码块。插件会注册一个全局的函数叫 <code>window.webpackJsonp</code>，所以同一个页面上运行多个源自不同 webpack 打包出来的代码时，可能会引起冲突。</p><h3 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h3><p><a href="https://webpack.js.org/configuration/output/#output-jsonpfunction" target="_blank" rel="noopener">webpack - configuration - output - jsonpfunction</a></p><p><a href="https://medium.com/@cliffers/how-to-run-multiple-webpack-instances-on-the-same-page-and-avoid-any-conflicts-4e2fe0f016d1" target="_blank" rel="noopener">How to run multiple webpack instances on the same page…and avoid any conflicts</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;遇到的问题&quot;&gt;&lt;a href=&quot;#遇到的问题&quot; class=&quot;headerlink&quot; title=&quot;遇到的问题&quot;&gt;&lt;/a&gt;遇到的问题&lt;/h3&gt;&lt;p&gt;对于同一个页面功能由不同的同事开发，都用到了 &lt;code&gt;webpack&lt;/code&gt; 以及 &lt;code&gt;Commo
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>常用 git 命令备忘</title>
    <link href="http://zhcexo.com/2018/03/23/git-cheat-sheet/"/>
    <id>http://zhcexo.com/2018/03/23/git-cheat-sheet/</id>
    <published>2018-03-23T03:02:43.000Z</published>
    <updated>2018-03-23T03:10:47.347Z</updated>
    
    <content type="html"><![CDATA[<p>导出项目文件</p><p><code>git archive --format zip -o filename.zip HEAD</code></p><p>修剪远程分支</p><p><code>git remote prune origin</code></p><p>显示本地分支与远程分支跟踪关系</p><p><code>git branch -vv</code></p><p>重命名本地分支</p><p><code>git branch -m oldname newname</code></p><p>本地分支与远程分支建立关系</p><p><code>git branch --set-upstream-to=origin/&lt;branch&gt; &lt;cur branch&gt;</code></p><p>强制覆盖本地文件的修改</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git fetch</span><br><span class="line">git reset --hard origin/master 或</span><br><span class="line">git reset --hard origin/develop 依此类推，使用想用的分支</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;导出项目文件&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git archive --format zip -o filename.zip HEAD&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;修剪远程分支&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git remote prune origin&lt;/code&gt;&lt;/p&gt;
&lt;p
      
    
    </summary>
    
    
      <category term="git" scheme="http://zhcexo.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>在 PhpStorm 中集成 git bash</title>
    <link href="http://zhcexo.com/2018/03/22/phpstorm-with-git-bash/"/>
    <id>http://zhcexo.com/2018/03/22/phpstorm-with-git-bash/</id>
    <published>2018-03-22T10:12:34.000Z</published>
    <updated>2018-03-23T03:33:09.172Z</updated>
    
    <content type="html"><![CDATA[<p>直接看图，注意后面的参数 <code>-login -i</code> 不能反了。</p><p><img src="http://of723n9da.bkt.clouddn.com/2016-10-17_220547.jpg" alt="git bash in phpstorm"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;直接看图，注意后面的参数 &lt;code&gt;-login -i&lt;/code&gt; 不能反了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://of723n9da.bkt.clouddn.com/2016-10-17_220547.jpg&quot; alt=&quot;git bash in phpst
      
    
    </summary>
    
    
      <category term="Tools" scheme="http://zhcexo.com/tags/Tools/"/>
    
  </entry>
  
</feed>
